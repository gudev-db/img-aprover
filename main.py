import streamlit as st
from pptx import Presentation
import io
import pdfplumber
import google.generativeai as genai
import os
from PIL import Image
import requests
import asyncio
from crawl4ai import *
import requests
import json
from dotenv import load_dotenv



# Configura√ß√£o inicial
st.set_page_config(
    layout="wide",
    page_title="Agente Holambra",
    page_icon="assets/page-icon.png"
)
st.image('assets/macLogo.png', width=300)

st.header('Agente Holambra')
st.header(' ')




gemini_api_key = os.getenv("GEM_API_KEY")
genai.configure(api_key=gemini_api_key)
modelo_vision = genai.GenerativeModel("gemini-2.0-flash", generation_config={"temperature": 0.1})
modelo_texto = genai.GenerativeModel("gemini-1.5-flash")
LANGS_KEY = os.getenv("LANGS_KEY")



# Carrega diretrizes
with open('data.txt', 'r') as file:
    conteudo = file.read()

tab_chatbot, tab_aprovacao, tab_geracao, tab_briefing, tab_resumo = st.tabs([
    "üí¨ Chatbot Holambra", 
    "‚úÖ Aprova√ß√£o de Conte√∫do", 
    "‚ú® Gera√ß√£o de Conte√∫do",
    "üìã Gera√ß√£o de Briefing Holambra",
    "üìù Resumo de Textos"
])

with tab_chatbot:  
    st.header("Chat Virtual Holambra")
    st.caption("Pergunte qualquer coisa sobre as diretrizes e informa√ß√µes da Holambra")
    
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Display message history
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # User input
    if prompt := st.chat_input("Como posso ajudar?"):
        # Add user message to history
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Prepare context
        contexto = f"""
        Voc√™ √© um assistente virtual especializado na Holambra Cooperativa Agroindustrial.
        Baseie suas respostas nestas diretrizes:
        {conteudo}

        Regras:
        - Seja preciso e t√©cnico
        - Quando o usu√°rio fala Holambra, ele est√° se referindo a Holambra Cooperativa Agroindustrial
        - N√ÉO H√Å conex√£o entre a Holambra Cooperativa Agroindustrial e as flores Holambra
        - Nunca fale sobre flores Holambra ou cidade Holambra
        - Mantenha o tom profissional mas amig√°vel
        - Se a pergunta for irrelevante, oriente educadamente
        - Forne√ßa exemplos quando √∫til
        """
        
        with st.chat_message("assistant"):
            with st.spinner('Pensando...'):
                try:
                    # Check if web search is needed (add trigger phrases)
                    needs_web_search = any(keyword in prompt.lower() for keyword in [
                        "not√≠cias", "atualiza√ß√µes", "novidades", 
                        "busca na web", "informa√ß√µes recentes"
                    ])
                    
                    if needs_web_search:
                        # Improved LangSearch API implementation
                        url = "https://api.langsearch.com/v1/web-search"
                        
                        # Enhanced query construction
                        query = f"{prompt} site:holambra.com.br OR site:holambra.coop.br"
                        
                        payload = {
                            "query": query,
                            "freshness": "month",
                            "summary": True,
                            "count": 5,  # Optimal number of results
                            "region": "br",  # Focus on Brazilian results
                            "language": "pt"  # Portuguese content
                        }
                        
                        headers = {
                            'Authorization': f'Bearer {LANGS_KEY}',
                            'Content-Type': 'application/json'
                        }
                        
                        try:
                            response = requests.post(
                                url,
                                headers=headers,
                                json=payload,  # Using json instead of dumps
                                timeout=15
                            )
                            response.raise_for_status()
                            results = response.json()
                            
                            # Enhanced result processing
                            if results.get('results'):
                                web_results = []
                                for result in results['results'][:5]:  # Top 5 results
                                    if 'holambra' in result['url'].lower():
                                        web_results.append(
                                            f"‚Ä¢ [{result['title']}]({result['url']})\n"
                                            f"  {result['snippet']}\n"
                                            f"  *Fonte: {result['url']}*"
                                        )
                                web_results = "\n\n".join(web_results) if web_results else "Nenhum resultado relevante encontrado"
                            else:
                                web_results = "Nenhum resultado encontrado"
                                
                        except requests.exceptions.RequestException as e:
                            st.warning("A busca online encontrou dificuldades. Mostrando apenas informa√ß√µes locais.")
                            web_results = ""
                            
                        resposta = modelo_texto.generate_content(
                            f"{contexto}\n\nDados da web:\n{web_results}\n\nPergunta: {prompt}"
                        )
                    else:
                        # Standard context-based response
                        resposta = modelo_texto.generate_content(
                            f"{contexto}\nPergunta: {prompt}"
                        )
                    
                    st.markdown(resposta.text)
                    st.session_state.messages.append({
                        "role": "assistant", 
                        "content": resposta.text,
                        "source": "web" if needs_web_search and web_results else "knowledge base"
                    })
                    
                except Exception as e:
                    st.error(f"Erro ao processar: {str(e)}")

# --- Estiliza√ß√£o Adicional ---
st.markdown("""
<style>
    .stChatMessage {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    [data-testid="stChatMessageContent"] {
        font-size: 1rem;
    }
    [data-testid="stChatMessage"] [data-testid="stMarkdownContainer"] {
        padding: 0.5rem 1rem;
    }
    .stChatInput {
        bottom: 20px;
        position: fixed;
        width: calc(100% - 5rem);
    }
</style>
""", unsafe_allow_html=True)


with tab_aprovacao:
    st.header("Valida√ß√£o de Materiais")
    st.header(' ')
    subtab1, subtab2 = st.tabs(["üñºÔ∏è An√°lise de Imagens", "‚úçÔ∏è Revis√£o de Textos"])
    
    with subtab1:
        uploaded_image = st.file_uploader("Carregue imagem para an√°lise (.jpg, .png)", type=["jpg", "jpeg", "png"], key="img_uploader")
        if uploaded_image:
            st.image(uploaded_image, use_column_width=True, caption="Pr√©-visualiza√ß√£o")
            if st.button("Validar Imagem", key="analyze_img"):
                with st.spinner('Comparando com diretrizes da marca...'):
                    try:
                        image = Image.open(uploaded_image)
                        img_bytes = io.BytesIO()
                        image.save(img_bytes, format=image.format)
                        
                        resposta = modelo_vision.generate_content([
                            f"""Analise esta imagem considerando:
                            {conteudo}
                            Forne√ßa um parecer t√©cnico detalhado com:
                            - ‚úÖ Acertos
                            - ‚ùå Desvios das diretrizes
                            - üõ† Recomenda√ß√µes precisas
                            - Diga se a imagem √© aprovada ou n√£o""",
                            {"mime_type": "image/jpeg", "data": img_bytes.getvalue()}
                        ])
                        st.subheader("Resultado da An√°lise")
                        st.markdown(resposta.text)
                    except Exception as e:
                        st.error(f"Falha na an√°lise: {str(e)}")

    with subtab2:
        texto_input = st.text_area("Insira o texto para valida√ß√£o:", height=200, key="text_input")
        if st.button("Validar Texto", key="validate_text"):
            with st.spinner('Verificando conformidade...'):
                resposta = modelo_texto.generate_content(
                    f"""Revise este texto conforme:
                    Diretrizes: {conteudo}
                    Texto: {texto_input}
                    
                    Formato requerido:
                    ### Texto Ajustado
                    [vers√£o reformulada]
                    
                    ### Altera√ß√µes Realizadas
                    - [lista itemizada de modifica√ß√µes]
                    ### Justificativas
                    [explica√ß√£o t√©cnica das mudan√ßas]"""
                )
                st.subheader("Vers√£o Validada")
                st.markdown(resposta.text)

with tab_geracao:
    st.header("Cria√ß√£o de Conte√∫do")
    st.header(' ')
    campanha_brief = st.text_area("Briefing criativo:", help="Descreva objetivos, tom de voz e especifica√ß√µes", height=150)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Diretrizes Visuais")

        if st.button("Gerar Especifica√ß√µes", key="gen_visual"):
            with st.spinner('Criando guia de estilo...'):
                prompt = f"""
                Voc√™ √© um designer que trabalha para a Macfor Marketing digital e voc√™ deve gerar conte√∫do criativo para o cliente Holambra Cooperativa Agroindustrial.

                Crie um manual t√©cnico para designers baseado em:
                Brief: {campanha_brief}
                Diretrizes: {conteudo}

                - Quando o usu√°rio fala Holambra, ele est√° se referindo a Holambra Cooperativa Agroindustrial
                - N√ÉO H√Å conex√£o entre a Holambra Cooperativa Agroindustrial e as flores Holambra
                - Nunca fale sobre flores Holambra ou cidade Holambra
                
                Inclua:
                1. üé® Paleta de cores (c√≥digos HEX/RGB)
                2. üñºÔ∏è Diretrizes de fotografia
                3. ‚úèÔ∏è Tipografia hier√°rquica
                4. üìê Grid e propor√ß√µes
                5. ‚ö†Ô∏è Restri√ß√µes de uso
                6. Descri√ß√£o exata e palp√°vel da imagem a ser utilizada no criativo que atenda a todas as guias acima
                """
                resposta = modelo_texto.generate_content(prompt)
                st.markdown(resposta.text)

    with col2:
        st.subheader("Copywriting")

        if st.button("Gerar Textos", key="gen_copy"):
            with st.spinner('Desenvolvendo conte√∫do textual...'):
                prompt = f"""
                Crie textos para campanha considerando:
                Brief: {campanha_brief}
                Diretrizes: {conteudo}

                - Quando o usu√°rio fala Holambra, ele est√° se referindo a Holambra Cooperativa Agroindustrial
                - N√ÉO H√Å conex√£o entre a Holambra Cooperativa Agroindustrial e as flores Holambra
                - Nunca fale sobre flores Holambra ou cidade Holambra
                
                Entregar:
                - üéØ 3 op√ß√µes de headline
                - üìù Corpo de texto (200 caracteres)
                - üì¢ 2 varia√ß√µes de CTA
                - üîç Meta description (SEO)
                """
                resposta = modelo_texto.generate_content(prompt)
                st.markdown(resposta.text)

# --- Estiliza√ß√£o ---
st.markdown("""
<style>
    div[data-testid="stTabs"] {
        margin-top: -30px;
    }
    div[data-testid="stVerticalBlock"] > div:has(>.stTextArea) {
        border-left: 3px solid #4CAF50;
        padding-left: 1rem;
    }
    button[kind="secondary"] {
        background: #f0f2f6 !important;
    }
</style>
""", unsafe_allow_html=True)




with tab_briefing:
    st.header("Gerador de Briefing Holambra")
    st.caption("Crie briefings completos para diferentes √°reas de atua√ß√£o da Holambra")
    
    # Tipos de briefing dispon√≠veis organizados por categoria
    tipos_briefing = {
        "Social": [
            "Post √∫nico",
            "Planejamento Mensal"
        ],
        "CRM": [
            "Planejamento de CRM",
            "Fluxo de Nutri√ß√£o",
            "Email Marketing"
        ],
        "M√≠dias": [
            "Campanha de M√≠dia"
        ],
        "Tech": [
            "Manuten√ß√£o de Site",
            "Constru√ß√£o de Site",
            "Landing Page"
        ],
        "Analytics": [
            "Dashboards"
        ],
        "Design": [
            "Social",
            "CRM",
            "M√≠dia",
            "KV/Identidade Visual"
        ],
        "Reda√ß√£o": [
            "Email Marketing",
            "Site",
            "Campanha de M√≠dias"
        ],
        "Planejamento": [
            "Relat√≥rios",
            "Estrat√©gico",
            "Concorr√™ncia"
        ]
    }

    # Layout em colunas
    col_config, col_preview = st.columns([1, 2])
    
    with col_config:
        # Sele√ß√£o hier√°rquica do tipo de briefing
        categoria = st.selectbox("Categoria:", list(tipos_briefing.keys()))
        tipo_briefing = st.selectbox("Tipo de Briefing:", tipos_briefing[categoria])
        
        # Campos comuns a todos os briefings
        st.subheader("Informa√ß√µes B√°sicas")
        nome_projeto = st.text_input("Nome do Projeto:")
        responsavel = st.text_input("Respons√°vel pelo Briefing:")
        data_entrega = st.date_input("Data de Entrega Prevista:")
        objetivo_geral = st.text_area("Objetivo Geral:")
        campos_mais = st.text_area("Informa√ß√µes a mais para o briefing")
        
        # Se√ß√£o din√¢mica baseada no tipo de briefing
        st.subheader("Informa√ß√µes Espec√≠ficas")
        
        # ========== SOCIAL ==========
        if tipo_briefing == "Post √∫nico":
            fotos = st.text_area("Fotos necess√°rias:")
            texto = st.text_area("Texto do post:")
            expectativa = st.text_area("Expectativa de resultado:")
            tom_voz = st.selectbox("Tom de voz:", ["Institucional", "Inspiracional", "Educativo", "Promocional"])
            direcionamento_arte = st.text_area("Direcionamento para a arte (KV):")
            palavras_chave = st.text_area("Palavras/conceitos-chave:")
            do_donts = st.text_area("Do's and Don'ts:")
            referencias = st.text_area("Refer√™ncias:")
            materiais_extras = st.text_area("Materiais extras:")
            info_sensiveis = st.text_area("Informa√ß√µes sens√≠veis:")
            if st.checkbox("√â sobre produtos?"):
                produtos_destaque = st.text_area("Produtos para destacar:")
        
        elif tipo_briefing == "Planejamento Mensal":
            eventos_mes = st.text_area("Eventos do m√™s:")
            datas_comemorativas = st.text_area("Datas/comemora√ß√µes:")
            expectativa_mensal = st.text_area("Expectativa de resultados:")
            planejamento_conteudos = st.text_area("Conte√∫dos planejados:")
            produtos_temas = st.text_area("Produtos/temas t√©cnicos:")
            planejamento_anual = st.file_uploader("Planejamento anual aprovado:")
            manuais = st.text_area("Manuais de conte√∫do dispon√≠veis:")
        
        # ========== CRM ==========
        elif tipo_briefing == "Planejamento de CRM":
            escopo = st.text_area("Escopo contratado:")
            ferramenta_crm = st.text_input("Ferramenta de CRM utilizada:")
            maturidade = st.selectbox("Maturidade de CRM:", ["Iniciante", "Intermedi√°rio", "Avan√ßado"])
            objetivo_crm = st.text_area("Objetivo com CRM:")
            canais = st.multiselect("Canais dispon√≠veis:", ["Email", "SMS", "WhatsApp", "M√≠dia Paga"])
            perfil_empresa = st.radio("Perfil da empresa:", ["B2B", "B2C"])
            metas = st.text_area("Metas a serem alcan√ßadas:")
            tamanho_base = st.text_input("Tamanho da base:")
            segmentacao = st.text_area("Segmenta√ß√£o/p√∫blico-alvo:")
            tom_voz = st.text_area("Tom de voz:")
            fluxos = st.text_area("Fluxos/e-mails para trabalhar:")
            if st.checkbox("Gera√ß√£o de leads?"):
                sla = st.text_area("SLA entre marketing e vendas:")
        
        elif tipo_briefing == "Fluxo de Nutri√ß√£o":
            gatilho = st.text_area("Gatilho de entrada:")
            asset_relacionado = st.text_area("Asset/evento relacionado:")
            etapa_funil = st.selectbox("Etapa do funil:", ["Topo", "Meio", "Fundo"])
            canais_fluxo = st.multiselect("Canais para o fluxo:", ["Email", "SMS", "WhatsApp", "M√≠dia Paga"])
            data_ativacao = st.date_input("Data de ativa√ß√£o esperada:")
            objetivo_fluxo = st.text_area("Objetivo do fluxo:")
            resultado_esperado = st.text_area("Resultado final esperado:")
        
        elif tipo_briefing == "Email Marketing":
            publico_email = st.text_area("P√∫blico e segmenta√ß√£o:")
            data_disparo = st.date_input("Data de disparo:")
            horario_preferencial = st.time_input("Hor√°rio preferencial:")
            objetivo_email = st.text_area("Objetivo:")
            resultado_esperado = st.text_area("Resultado final esperado:")
            psd_figma = st.file_uploader("Arquivo PSD/Figma do email:")
            google_doc = st.text_input("Link do Google Doc com conte√∫do:")
            links_videos = st.text_area("Links de v√≠deos:")
            ctas = st.text_area("CTAs:")
        
        # ========== M√çDIAS ==========
        elif tipo_briefing == "Campanha de M√≠dia":
            periodo_acao = st.text_input("Per√≠odo da a√ß√£o:")
            orcamento = st.number_input("Or√ßamento (R$):", min_value=0)
            mecanismo_promocional = st.text_area("Mecanismo promocional:")
            praca_especifica = st.text_area("Pra√ßa espec√≠fica:")
            responsavel_criativo = st.radio("Quem far√° os criativos:", ["Macfor", "Cliente"])
            materiais = st.text_area("Materiais (copies e pe√ßas criativas):")
            objetivo_acao = st.text_area("Objetivo da a√ß√£o:")
            meta = st.text_area("Meta:")
            plataformas = st.multiselect("Plataformas:", ["Facebook", "Instagram", "Google Ads", "LinkedIn"])
            segmentacao = st.text_area("Segmenta√ß√£o:")
            link_destino = st.text_input("Link de destino:")
        
        # ========== TECH ==========
        elif tipo_briefing == "Manuten√ß√£o de Site":
            st.markdown("**Descreva a demanda usando 5W2H:**")
            what = st.text_area("O que precisa ser feito?")
            why = st.text_area("Por que √© necess√°rio?")
            where = st.text_area("Onde deve ser implementado?")
            when = st.text_area("Quando precisa estar pronto?")
            who = st.text_area("Quem ser√° impactado?")
            how = st.text_area("Como deve funcionar?")
            how_much = st.text_area("Qual o esfor√ßo estimado?")
            descricao_alteracao = st.text_area("Descri√ß√£o detalhada da altera√ß√£o:")
            prints = st.file_uploader("Anexar prints (se aplic√°vel):", accept_multiple_files=True)
            link_referencia = st.text_input("Link de refer√™ncia:")
            if st.checkbox("√â cliente novo?"):
                acessos = st.text_area("Acessos (servidor, CMS, etc.):")
        
        elif tipo_briefing == "Constru√ß√£o de Site":
            acessos = st.text_area("Acessos (servidor, nuvens, reposit√≥rios, CMS):")
            dominio = st.text_input("Dom√≠nio:")
            prototipo = st.file_uploader("Prot√≥tipo em Figma:")
            conteudos = st.text_area("Conte√∫dos (textos, banners, v√≠deos):")
            plataforma = st.selectbox("Plataforma:", ["WordPress", "React", "Vue.js", "Outra"])
            hierarquia = st.text_area("Hierarquia de p√°ginas:")
            seo = st.checkbox("Incluir otimiza√ß√£o SEO?")
            if seo:
                palavras_chave = st.text_area("Palavras-chave principais:")
        
        elif tipo_briefing == "Landing Page":
            objetivo_lp = st.text_area("Objetivo da LP:")
            plataforma = st.text_input("Plataforma de desenvolvimento:")
            integracao_site = st.radio("Precisa integrar com site existente?", ["Sim", "N√£o"])
            dados_coletar = st.text_area("Dados a serem coletados no formul√°rio:")
            destino_dados = st.text_area("Onde os dados ser√£o gravados:")
            kv_referencia = st.file_uploader("KV de refer√™ncia:")
            conteudos_pagina = st.text_area("Conte√∫dos da p√°gina:")
            menu = st.text_area("Menu/barra de navega√ß√£o:")
            header_footer = st.text_area("Header e Footer:")
            comunicar = st.text_area("O que deve ser comunicado:")
            nao_comunicar = st.text_area("O que n√£o deve ser comunicado:")
            observacoes = st.text_area("Observa√ß√µes:")
        
        # ========== ANALYTICS ==========
        elif tipo_briefing == "Dashboards":
            st.markdown("**Acessos:**")
            google_access = st.checkbox("Solicitar acesso Google Analytics")
            meta_access = st.checkbox("Solicitar acesso Meta Ads")
            outros_acessos = st.text_area("Outros acessos necess√°rios:")
            
            st.markdown("**Requisitos do Dashboard:**")
            okrs = st.text_area("OKRs e metas:")
            dados_necessarios = st.text_area("Dados que precisam ser exibidos:")
            tipos_graficos = st.multiselect("Tipos de gr√°ficos preferidos:", 
                                         ["Barras", "Linhas", "Pizza", "Mapas", "Tabelas"])
            atualizacao = st.selectbox("Frequ√™ncia de atualiza√ß√£o:", 
                                    ["Tempo real", "Di√°ria", "Semanal", "Mensal"])
        
        # ========== DESIGN ==========
        elif tipo_briefing == "Social":
            formato = st.selectbox("Formato:", ["Est√°tico", "Motion"])
            kv = st.file_uploader("KV a ser seguido:")
            linha_criativa = st.text_area("Linha criativa:")
            usar_fotos = st.radio("Usar fotos?", ["Sim", "N√£o"])
            referencias = st.text_area("Refer√™ncias:")
            identidade_visual = st.text_area("Elementos de identidade visual:")
            texto_arte = st.text_area("Texto da arte:")
        
        elif tipo_briefing == "CRM":
            st.info("Layouts simples s√£o mais eficientes para CRM!")
            referencias = st.text_area("Refer√™ncias visuais:")
            tipografia = st.text_input("Tipografia preferencial:")
            ferramenta_envio = st.text_input("Ferramenta de CRM que enviar√° a arte:")
            formato_arte = st.selectbox("Formato da arte:", ["Imagem", "HTML"])
        
        elif tipo_briefing == "M√≠dia":
            formato = st.selectbox("Formato:", ["Horizontal", "Vertical", "Quadrado"])
            tipo_peca = st.selectbox("Tipo de pe√ßa:", ["Arte est√°tica", "Carrossel", "Motion"])
            direcionamento = st.text_area("Direcionamento de conte√∫do:")
            num_pecas = st.number_input("N√∫mero de pe√ßas:", min_value=1)
            publico = st.text_area("P√∫blico-alvo:")
            objetivo = st.text_area("Objetivo:")
            referencias_concorrentes = st.text_area("Refer√™ncias de concorrentes:")
        
        elif tipo_briefing == "KV/Identidade Visual":
            info_negocio = st.text_area("Informa√ß√µes do neg√≥cio:")
            referencias = st.text_area("Refer√™ncias:")
            restricoes = st.text_area("O que n√£o fazer (cores, elementos proibidos):")
            manual_anterior = st.file_uploader("Manual de marca anterior:")
            imagem_transmitir = st.text_area("Qual imagem queremos transmitir?")
            tema_campanha = st.text_area("Tema da campanha:")
            publico = st.text_area("P√∫blico-alvo:")
            tom_voz = st.text_area("Tom de voz:")
            banco_imagens = st.radio("Tipo de imagens:", ["Banco de imagens", "Pessoas reais"])
            limitacoes = st.text_area("Limita√ß√µes de uso:")
        
        # ========== REDA√á√ÉO ==========
        elif tipo_briefing == "Email Marketing":
            objetivo_email = st.text_area("Objetivo:")
            produtos = st.text_area("Produtos a serem divulgados:")
            estrutura = st.text_area("Estrutura desejada:")
            cta = st.text_area("CTA desejado:")
            link_cta = st.text_input("Link para o CTA:")
            parte_campanha = st.radio("Faz parte de campanha maior?", ["Sim", "N√£o"])
        
        elif tipo_briefing == "Site":
            objetivo_site = st.text_area("Objetivo:")
            informacoes = st.text_area("Quais informa√ß√µes precisa ter:")
            links = st.text_area("Links necess√°rios:")
            wireframe = st.file_uploader("Wireframe do site:")
            tamanho_texto = st.selectbox("Tamanho do texto:", ["Curto", "M√©dio", "Longo"])
            if st.checkbox("√â site novo?"):
                insumos = st.text_area("Insumos sobre a empresa/projeto:")
        
        elif tipo_briefing == "Campanha de M√≠dias":
            objetivo_campanha = st.text_area("Objetivo:")
            plataformas = st.multiselect("Plataformas:", ["Facebook", "Instagram", "LinkedIn", "Google"])
            palavras_chave = st.text_area("Palavras-chave:")
            tom_voz = st.text_area("Tom de voz:")
            publico = st.text_area("P√∫blico-alvo:")
            cronograma = st.text_area("Cronograma:")
        
        # ========== PLANEJAMENTO ==========
        elif tipo_briefing == "Relat√≥rios":
            objetivo_relatorio = st.text_area("Objetivo:")
            periodo_analise = st.text_area("Per√≠odo de an√°lise:")
            granularidade = st.selectbox("Granularidade:", ["Di√°ria", "Semanal", "Mensal", "Trimestral"])
            metricas = st.text_area("M√©tricas a serem inclu√≠das:")
            comparativos = st.text_area("Comparativos desejados:")
        
        elif tipo_briefing == "Estrat√©gico":
            introducao = st.text_area("Introdu√ß√£o sobre a empresa:")
            orcamento = st.number_input("Or√ßamento (R$):", min_value=0)
            publico = st.text_area("P√∫blico-alvo:")
            objetivo_mkt = st.text_area("Objetivo de marketing:")
            etapas_funil = st.multiselect("Etapas do funil:", ["Topo", "Meio", "Fundo"])
            canais = st.multiselect("Canais dispon√≠veis:", 
                                  ["Social", "Email", "Site", "M√≠dia Paga", "SEO"])
            produtos = st.text_area("Produtos/portf√≥lio:")
            metas = st.text_area("Metas e m√©tricas:")
            concorrentes = st.text_area("Concorrentes:")
            acessos = st.text_area("Acessos (GA, Meta Ads, etc.):")
            expectativas = st.text_area("Expectativas de resultados:")
            materiais = st.text_area("Materiais de apoio:")
        
        elif tipo_briefing == "Concorr√™ncia":
            orcamento = st.number_input("Or√ßamento (R$):", min_value=0)
            publico = st.text_area("P√∫blico-alvo:")
            objetivo = st.text_area("Objetivo:")
            etapas_funil = st.multiselect("Etapas do funil:", ["Topo", "Meio", "Fundo"])
            produtos = st.text_area("Produtos/portf√≥lio:")
            metas = st.text_area("Metas e m√©tricas:")
            concorrentes = st.text_area("Concorrentes:")
            acessos = st.text_area("Acessos (GA, Meta Ads, etc.):")
            expectativas = st.text_area("Expectativas de resultados:")
        
        # Bot√£o para gerar o briefing
        if st.button("üîÑ Gerar Briefing Completo", type="primary"):
            with st.spinner('Construindo briefing profissional...'):
                try:
                    # Construir o prompt com todas as informa√ß√µes coletadas
                    prompt_parts = [
                        f"# BRIEFING {tipo_briefing.upper()} - HOLAMBRA",
                        f"**Projeto:** {nome_projeto}",
                        f"**Respons√°vel:** {responsavel}",
                        f"**Data de Entrega:** {data_entrega}",
                        "",
                        "## 1. INFORMA√á√ïES B√ÅSICAS",
                        f"**Objetivo Geral:** {objetivo_geral}",
                        f"**Informa√ß√µes extras para o briefing** {campos_mais}",
                        "",
                        "## 2. INFORMA√á√ïES ESPEC√çFICAS"
                    ]

                    # Adicionar campos espec√≠ficos dinamicamente
                    if tipo_briefing == "Post √∫nico":
                        prompt_parts.extend([
                            f"### Post √∫nico",
                            f"**Fotos necess√°rias:** {fotos}",
                            f"**Texto do post:** {texto}",
                            f"**Expectativa de resultado:** {expectativa}",
                            f"**Tom de voz:** {tom_voz}",
                            f"**Direcionamento para arte:** {direcionamento_arte}",
                            f"**Palavras-chave:** {palavras_chave}",
                            f"**Do's and Don'ts:** {do_donts}",
                            f"**Refer√™ncias:** {referencias}",
                            f"**Materiais extras:** {materiais_extras}",
                            f"**Informa√ß√µes sens√≠veis:** {info_sensiveis}",
                            f"**Produtos para destacar:** {produtos_destaque if 'produtos_destaque' in locals() else 'N/A'}"
                        ])
                    
                    elif tipo_briefing == "Planejamento de CRM":
                        prompt_parts.extend([
                            f"### Planejamento de CRM",
                            f"**Escopo contratado:** {escopo}",
                            f"**Ferramenta de CRM:** {ferramenta_crm}",
                            f"**Maturidade de CRM:** {maturidade}",
                            f"**Objetivo com CRM:** {objetivo_crm}",
                            f"**Canais dispon√≠veis:** {', '.join(canais)}",
                            f"**Perfil da empresa:** {perfil_empresa}",
                            f"**Metas:** {metas}",
                            f"**Tamanho da base:** {tamanho_base}",
                            f"**Segmenta√ß√£o:** {segmentacao}",
                            f"**Tom de voz:** {tom_voz}",
                            f"**Fluxos/e-mails:** {fluxos}",
                            f"**SLA marketing/vendas:** {sla if 'sla' in locals() else 'N/A'}"
                        ])
                    
                    elif tipo_briefing == "Fluxo de Nutri√ß√£o":
                        prompt_parts.extend([
                            f"### Fluxo de Nutri√ß√£o",
                            f"**Gatilho de entrada:** {gatilho}",
                            f"**Asset/evento relacionado:** {asset_relacionado}",
                            f"**Etapa do funil:** {etapa_funil}",
                            f"**Canais:** {', '.join(canais_fluxo)}",
                            f"**Data de ativa√ß√£o:** {data_ativacao}",
                            f"**Objetivo:** {objetivo_fluxo}",
                            f"**Resultado esperado:** {resultado_esperado}"
                        ])

                    elif tipo_briefing == "Email Marketing":
                        prompt_parts.extend([
                            f"### Email Marketing",
                            f"**P√∫blico:** {publico_email}",
                            f"**Data/hor√°rio:** {data_disparo} {horario_preferencial}",
                            f"**Objetivo:** {objetivo_email}",
                            f"**Resultado esperado:** {resultado_esperado}",
                            f"**Arquivos:** {'PSD/Figma anexado' if psd_figma else 'Nenhum'}",
                            f"**Google Doc:** {google_doc}",
                            f"**V√≠deos:** {links_videos}",
                            f"**CTAs:** {ctas}"
                        ])

                    elif tipo_briefing == "Campanha de M√≠dia":
                        prompt_parts.extend([
                            f"### Campanha de M√≠dia",
                            f"**Per√≠odo:** {periodo_acao}",
                            f"**Or√ßamento:** R${orcamento}",
                            f"**Mecanismo promocional:** {mecanismo_promocional}",
                            f"**Pra√ßa espec√≠fica:** {praca_especifica}",
                            f"**Respons√°vel criativo:** {responsavel_criativo}",
                            f"**Materiais:** {materiais}",
                            f"**Objetivo:** {objetivo_acao}",
                            f"**Meta:** {meta}",
                            f"**Plataformas:** {', '.join(plataformas)}",
                            f"**Segmenta√ß√£o:** {segmentacao}",
                            f"**Link de destino:** {link_destino}"
                        ])

                    elif tipo_briefing == "Manuten√ß√£o de Site":
                        prompt_parts.extend([
                            f"### Manuten√ß√£o de Site (5W2H)",
                            f"**O que:** {what}",
                            f"**Por que:** {why}",
                            f"**Onde:** {where}",
                            f"**Quando:** {when}",
                            f"**Quem:** {who}",
                            f"**Como:** {how}",
                            f"**Quanto custa:** {how_much}",
                            f"**Descri√ß√£o detalhada:** {descricao_alteracao}",
                            f"**Links/prints:** {link_referencia}",
                            f"**Acessos:** {acessos if 'acessos' in locals() else 'N/A'}"
                        ])

                    elif tipo_briefing == "Constru√ß√£o de Site":
                        prompt_parts.extend([
                            f"### Constru√ß√£o de Site",
                            f"**Acessos:** {acessos}",
                            f"**Dom√≠nio:** {dominio}",
                            f"**Prot√≥tipo:** {'Anexado' if prototipo else 'N√£o fornecido'}",
                            f"**Conte√∫dos:** {conteudos}",
                            f"**Plataforma:** {plataforma}",
                            f"**Hierarquia:** {hierarquia}",
                            f"**SEO:** {'Sim' + (f' - Palavras-chave: {palavras_chave}' if 'palavras_chave' in locals() else '') if seo else 'N√£o'}"
                        ])

                    elif tipo_briefing == "Landing Page":
                        prompt_parts.extend([
                            f"### Landing Page",
                            f"**Objetivo:** {objetivo_lp}",
                            f"**Plataforma:** {plataforma}",
                            f"**Integra√ß√£o com site:** {integracao_site}",
                            f"**Dados coletados:** {dados_coletar}",
                            f"**Destino dos dados:** {destino_dados}",
                            f"**KV refer√™ncia:** {'Anexado' if kv_referencia else 'N√£o fornecido'}",
                            f"**Conte√∫dos:** {conteudos_pagina}",
                            f"**Menu:** {menu}",
                            f"**Header/Footer:** {header_footer}",
                            f"**Comunica√ß√£o:** {comunicar}",
                            f"**Restri√ß√µes:** {nao_comunicar}",
                            f"**Observa√ß√µes:** {observacoes}"
                        ])

                    elif tipo_briefing == "Dashboards":
                        prompt_parts.extend([
                            f"### Dashboards",
                            f"**Acessos solicitados:** {'Google Analytics' if google_access else ''} {'Meta Ads' if meta_access else ''} {outros_acessos}",
                            f"**OKRs/Metas:** {okrs}",
                            f"**Dados necess√°rios:** {dados_necessarios}",
                            f"**Tipos de gr√°ficos:** {', '.join(tipos_graficos)}",
                            f"**Atualiza√ß√£o:** {atualizacao}"
                        ])

                    elif tipo_briefing == "Social (Design)":
                        prompt_parts.extend([
                            f"### Design para Social",
                            f"**Formato:** {formato}",
                            f"**KV refer√™ncia:** {'Anexado' if kv else 'N√£o fornecido'}",
                            f"**Linha criativa:** {linha_criativa}",
                            f"**Fotos:** {usar_fotos}",
                            f"**Refer√™ncias:** {referencias}",
                            f"**Identidade visual:** {identidade_visual}",
                            f"**Texto da arte:** {texto_arte}"
                        ])

                    elif tipo_briefing == "CRM (Design)":
                        prompt_parts.extend([
                            f"### Design para CRM",
                            f"**Refer√™ncias visuais:** {referencias}",
                            f"**Tipografia:** {tipografia}",
                            f"**Ferramenta de envio:** {ferramenta_envio}",
                            f"**Formato da arte:** {formato_arte}"
                        ])

                    elif tipo_briefing == "M√≠dia (Design)":
                        prompt_parts.extend([
                            f"### Design para M√≠dia",
                            f"**Formato:** {formato}",
                            f"**Tipo de pe√ßa:** {tipo_peca}",
                            f"**Direcionamento:** {direcionamento}",
                            f"**N√∫mero de pe√ßas:** {num_pecas}",
                            f"**P√∫blico-alvo:** {publico}",
                            f"**Objetivo:** {objetivo}",
                            f"**Refer√™ncias concorrentes:** {referencias_concorrentes}"
                        ])

                    elif tipo_briefing == "KV/Identidade Visual":
                        prompt_parts.extend([
                            f"### KV/Identidade Visual",
                            f"**Informa√ß√µes do neg√≥cio:** {info_negocio}",
                            f"**Refer√™ncias:** {referencias}",
                            f"**Restri√ß√µes:** {restricoes}",
                            f"**Manual anterior:** {'Anexado' if manual_anterior else 'N√£o fornecido'}",
                            f"**Imagem a transmitir:** {imagem_transmitir}",
                            f"**Tema da campanha:** {tema_campanha}",
                            f"**P√∫blico-alvo:** {publico}",
                            f"**Tom de voz:** {tom_voz}",
                            f"**Banco de imagens:** {banco_imagens}",
                            f"**Limita√ß√µes:** {limitacoes}"
                        ])

                    elif tipo_briefing == "Email Marketing (Reda√ß√£o)":
                        prompt_parts.extend([
                            f"### Reda√ß√£o para Email Marketing",
                            f"**Objetivo:** {objetivo_email}",
                            f"**Produtos:** {produtos}",
                            f"**Estrutura:** {estrutura}",
                            f"**CTA:** {cta}",
                            f"**Link CTA:** {link_cta}",
                            f"**Parte de campanha:** {parte_campanha}"
                        ])

                    elif tipo_briefing == "Site (Reda√ß√£o)":
                        prompt_parts.extend([
                            f"### Reda√ß√£o para Site",
                            f"**Objetivo:** {objetivo_site}",
                            f"**Informa√ß√µes necess√°rias:** {informacoes}",
                            f"**Links:** {links}",
                            f"**Wireframe:** {'Anexado' if wireframe else 'N√£o fornecido'}",
                            f"**Tamanho do texto:** {tamanho_texto}",
                            f"**Insumos empresa:** {insumos if 'insumos' in locals() else 'N/A'}"
                        ])

                    elif tipo_briefing == "Campanha de M√≠dias (Reda√ß√£o)":
                        prompt_parts.extend([
                            f"### Reda√ß√£o para Campanha de M√≠dias",
                            f"**Objetivo:** {objetivo_campanha}",
                            f"**Plataformas:** {', '.join(plataformas)}",
                            f"**Palavras-chave:** {palavras_chave}",
                            f"**Tom de voz:** {tom_voz}",
                            f"**P√∫blico-alvo:** {publico}",
                            f"**Cronograma:** {cronograma}"
                        ])

                    elif tipo_briefing == "Relat√≥rios":
                        prompt_parts.extend([
                            f"### Relat√≥rios",
                            f"**Objetivo:** {objetivo_relatorio}",
                            f"**Per√≠odo de an√°lise:** {periodo_analise}",
                            f"**Granularidade:** {granularidade}",
                            f"**M√©tricas:** {metricas}",
                            f"**Comparativos:** {comparativos}"
                        ])

                    elif tipo_briefing == "Estrat√©gico":
                        prompt_parts.extend([
                            f"### Planejamento Estrat√©gico",
                            f"**Introdu√ß√£o:** {introducao}",
                            f"**Or√ßamento:** R${orcamento}",
                            f"**P√∫blico-alvo:** {publico}",
                            f"**Objetivo de marketing:** {objetivo_mkt}",
                            f"**Etapas do funil:** {', '.join(etapas_funil)}",
                            f"**Canais:** {', '.join(canais)}",
                            f"**Produtos/portf√≥lio:** {produtos}",
                            f"**Metas:** {metas}",
                            f"**Concorrentes:** {concorrentes}",
                            f"**Acessos:** {acessos}",
                            f"**Expectativas:** {expectativas}",
                            f"**Materiais de apoio:** {materiais}"
                        ])

                    elif tipo_briefing == "Concorr√™ncia":
                        prompt_parts.extend([
                            f"### Briefing para Concorr√™ncia",
                            f"**Or√ßamento:** R${orcamento}",
                            f"**P√∫blico-alvo:** {publico}",
                            f"**Objetivo:** {objetivo}",
                            f"**Etapas do funil:** {', '.join(etapas_funil)}",
                            f"**Produtos/portf√≥lio:** {produtos}",
                            f"**Metas:** {metas}",
                            f"**Concorrentes:** {concorrentes}",
                            f"**Acessos:** {acessos}",
                            f"**Expectativas:** {expectativas}"
                        ])
                    
                    prompt_parts.extend([
                        "",
                        "## 3. DIRETRIZES DA MARCA",
                        conteudo,
                        "",
                      
                    ])
                    
                    prompt = "\n".join(prompt_parts)
                    resposta = modelo_texto.generate_content(prompt)
                    
                    with col_preview:
                        st.subheader(f"Briefing {tipo_briefing} - {nome_projeto}")
                        st.markdown(resposta.text)
                        
                        st.download_button(
                            label="üì• Download do Briefing",
                            data=resposta.text,
                            file_name=f"briefing_{tipo_briefing.lower().replace(' ', '_')}_{nome_projeto.lower().replace(' ', '_')}.txt",
                            mime="text/plain"
                        )
                
                except Exception as e:
                    st.error(f"Erro ao gerar briefing: {str(e)}")

    with col_preview:
        st.subheader("Pr√©-visualiza√ß√£o do Briefing")
        if 'resposta' in locals():
            st.markdown(resposta.text)
        else:
            st.info("Preencha os campos e clique em 'Gerar Briefing' para visualizar aqui")

# Estiliza√ß√£o adicional
st.markdown("""
<style>
    div[data-testid="stTabs"] {
        margin-top: -30px;
    }
    .stDownloadButton button {
        background-color: #2e7d32 !important;
        color: white !important;
    }
    .stButton button {
        width: 100%;
    }
    [data-testid="stFileUploader"] {
        padding: 15px;
        border: 1px dashed #ccc;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

with tab_resumo:
    st.header("Resumo de Textos")
    st.caption("Resuma textos longos mantendo o alinhamento com as diretrizes da Holambra")
    
    # Layout em colunas
    col_original, col_resumo = st.columns(2)
    
    with col_original:
        st.subheader("Texto Original")
        texto_original = st.text_area(
            "Cole o texto que deseja resumir:",
            height=400,
            placeholder="Insira aqui o texto completo que precisa ser resumido..."
        )
        
        # Configura√ß√µes do resumo
        with st.expander("‚öôÔ∏è Configura√ß√µes do Resumo"):
            nivel_resumo = st.select_slider(
                "N√≠vel de Resumo:",
                options=["Extenso", "Moderado", "Conciso"],
                value="Moderado"
            )
            
            incluir_pontos = st.checkbox(
                "Incluir pontos-chave em t√≥picos",
                value=True
            )
            
            manter_terminologia = st.checkbox(
                "Manter terminologia t√©cnica",
                value=True
            )
    
    with col_resumo:
        st.subheader("Resumo Gerado")
        
        if st.button("Gerar Resumo", key="gerar_resumo"):
            if not texto_original.strip():
                st.warning("Por favor, insira um texto para resumir")
            else:
                with st.spinner("Processando resumo..."):
                    try:
                        # Configura o prompt de acordo com as op√ß√µes selecionadas
                        config_resumo = {
                            "Extenso": "um resumo detalhado mantendo cerca de 50% do conte√∫do original",
                            "Moderado": "um resumo conciso mantendo cerca de 30% do conte√∫do original",
                            "Conciso": "um resumo muito breve com apenas os pontos essenciais (cerca de 10-15%)"
                        }[nivel_resumo]
                        
                        prompt = f"""
                        Crie um resumo profissional deste texto para a Holambra Cooperativa Agroindustrial,
                        seguindo rigorosamente estas diretrizes da marca:
                        {conteudo}
                        
                        Requisitos:
                        - {config_resumo}
                        - {"Inclua os principais pontos em t√≥picos" if incluir_pontos else "Formato de texto cont√≠nuo"}
                        - {"Mantenha a terminologia t√©cnica espec√≠fica" if manter_terminologia else "Simplifique a linguagem"}
                        - Priorize informa√ß√µes relevantes para o agroneg√≥cio
                        - Mantenha o tom profissional da Holambra
                        - Adapte para o p√∫blico-alvo da cooperativa
                        
                        Texto para resumir:
                        {texto_original}
                        
                        Estrutura do resumo:
                        1. T√≠tulo do resumo
                        2. {"Principais pontos em t√≥picos (se aplic√°vel)" if incluir_pontos else "Resumo textual"}
                        3. Conclus√£o/Recomenda√ß√µes
                        """
                        
                        resposta = modelo_texto.generate_content(prompt)
                        
                        # Exibe o resultado
                        st.markdown(resposta.text)
                        
                        # Bot√£o para copiar
                        st.download_button(
                            "üìã Copiar Resumo",
                            data=resposta.text,
                            file_name="resumo_holambra.txt",
                            mime="text/plain"
                        )
                        
                    except Exception as e:
                        st.error(f"Erro ao gerar resumo: {str(e)}")
